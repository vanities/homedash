            {% if upload == 'complete' %}
              <span id=upload_completed>complete</span>
            {% elif upload == 'failed' %}
              <span id=upload_completed color=red>failed</span>
            {% endif %}
            
            ## WORKS ON python
@app.route('/static/<folder>', methods=['GET', 'POST'])
def download_folder(folder):
    
    def zipdir(paths, ziph): 
        # ziph is zipfile handle
        for root, dirs, files in walk(paths):
            for f in files:
                ziph.write(path.join(root, f))
    
    
    filename = UPLOAD_FOLDER + folder + '.zip'
    zip_file = zipfile.ZipFile(filename, 'w', zipfile.ZIP_DEFLATED)
    
    #uid = getpwnam("www-data").pw_uid
    #gid = getgrnam("www-data").gr_gid
    #chown(filename, uid, gid)
    zipdir(filename,zip_file)
    
    
    print(app.config['UPLOAD_FOLDER'] + folder + '.zip sending for download')
    return send_from_directory(directory=app.config['UPLOAD_FOLDER'], filename=folder +'.zip', as_attachment=True)
    
    
    {% extends "html/dashboard.html" %}


<html>
<head>
{% block head %}

  <!-- Required meta tags -->
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">

    <!-- favicon  <link rel="shortcut icon" href="{{ url_for('static', filename='images/favicon2.ico') }}" type="image/x-icon">-->
 
  <!-- jQuery first, then Popper, then Bootstrap JS. -->  
  <!-- FULL jquery for $.post() -->
  <script src="{{ url_for('static', filename='js/jquery-3.2.1.js') }}"></script>
  <script src="{{ url_for('static', filename='js/popper.min.js') }}"></script>
  <script src="{{ url_for('static', filename='js/bootstrap.min.js') }}"></script>

  <!-- bootstrap v.4b css -->
  <link rel="stylesheet" href="{{ url_for('static', filename='css/bootstrap.min.css') }}">

  <link rel="stylesheet" href="{{ url_for('static', filename='css/font-awesome.min.css') }}">

{% block javascript %}
<script type="text/javascript">
    // Variables for referencing the canvas and 2dcanvas context
    var canvas,ctx,

    // Variables to keep track of the mouse position and left-button status 
    mouseX,mouseY,mouseDown=0,

    // Variables to keep track of the touch position
    touchX,touchY,

    // Let's use black by setting RGB values to 0, and 255 alpha (completely opaque)    
    color="black",

    // pen size
    size=7;

    var historyArray = new Array();
    var step = -1;

    function history() {
        step++;
        if (step < historyArray.length) { historyArray.length = step; }
        historyArray.push(document.getElementById('scratchpad').toDataURL());
        console.log(document.getElementById('scratchpad').toDataURL());
        document.title = historyArray.length + ' draws done';

    }
    function undo(ctx) {
        if (step > 0) {

            step--;
            var new_canvas = new Image();
            
            new_canvas.onload = function () { ctx.drawImage(new_canvas, 0, 0); 
                                              console.log(new_canvas.src); 
                                              console.log('two'); };      

            new_canvas.src = historyArray[step];
            console.log('three');

        }   

    }
    function redo(ctx) {
        if (step < historyArray.length-1) {
            step++;
            var new_canvas = new Image();

            new_canvas.onload = function () { ctx.drawImage(new_canvas, 0, 0);             
                                              console.log(new_canvas.src);  };

            new_canvas.src = historyArray[step];

        }

    }

    // Draws a dot at a specific position on the supplied canvas name
    // Parameters are: A canvas context, the x position, the y position, the size of the dot
    function drawDot(ctx,x,y,size) {

        // Select a fill style
        ctx.fillStyle = color;

        // Draw a filled circle
        ctx.beginPath();
        ctx.arc(x, y, size, 0, Math.PI*2, true); 
        ctx.closePath();
        ctx.fill();
    } 

    // Clear the canvas context using the canvas width and height
    function clearCanvas(canvas,ctx) {
        ctx.clearRect(0, 0, canvas.width, canvas.height);
    }

    // Convert the canvas contents to a PNG image file, and copy it into a smaller image on the page so it can be saved more easily
    // From: http://stackoverflow.com/questions/10673122/how-to-save-canvas-as-an-image-with-canvas-todataurl
    function updateImageLocal(canvas) {
        var image_data = canvas.toDataURL("image/png");  

        // Displaying the image data in a "normal" image means users need to click or long-tap on it to  save, but is compatible with more devices
        document.getElementById('image_display').src = image_data; // Place the image data in to the form
        history();
        

    }

    // Convert the canvas contents to a PNG image file, and output it in a new browser window
    // From: http://stackoverflow.com/questions/10673122/how-to-save-canvas-as-an-image-with-canvas-todataurl
    function viewImageLocal(canvas) {
        var image_data = canvas.toDataURL("image/png");

        // The browser will typically display the image in a new tab
         window.open(image_data);
    }

    // Send image to local server.
    function saveImageLocal(canvas) {
        var image_data = canvas.toDataURL("image/png");
        $.post( "scratchpad" , { imageBase64:image_data } );
    } 



    // Keep track of the mouse button being pressed and draw a dot at current location
    function scratchpad_mouseDown() {
        mouseDown=1;
        drawDot(ctx,mouseX,mouseY,size);
    }

    // Keep track of the mouse button being released
    function scratchpad_mouseUp() {
        
        mouseDown=0;

        // Update a local copy of the image for easier saving
        updateImageLocal(canvas);
    }

    // Keep track of the mouse position and draw a dot if mouse button is currently pressed
    function scratchpad_mouseMove(e) { 
        // Update the mouse co-ordinates when moved
        getMousePos(e);

        // Draw a dot if the mouse button is currently being pressed
        if (mouseDown==1) {
            drawDot(ctx,mouseX,mouseY,size);
        }
    }

    // Get the current mouse position relative to the top-left of the canvas
    function getMousePos(e) {
        if (!e)
            var e = event;

        if (e.offsetX) {
            mouseX = e.offsetX;
            mouseY = e.offsetY;
        }
        else if (e.layerX) {
            mouseX = e.layerX;
            mouseY = e.layerY;
        }
     }

    // Draw something when a touch start is detected
    function scratchpad_touchStart() {

        history();    
        // Update the touch co-ordinates
        getTouchPos();

        drawDot(ctx,mouseX,mouseY,size);

        // Prevents an additional mousedown event being triggered
        event.preventDefault();
    }

    // Draw something and prevent the default scrolling when touch movement is detected
    function scratchpad_touchMove(e) { 
        // Update the touch co-ordinates
        getTouchPos(e);

        // During a touchmove event, unlike a mousemove event, we don't need to check if the touch is engaged, since there will always be contact with the screen by definition.
        drawDot(ctx,mouseX,mouseY,size);

        // Prevent a scrolling action as a result of this touchmove triggering.
        event.preventDefault();
    }

    // Called when touch is lifted from the screen of the device.
    function scratchpad_touchEnd(e) { 
        // Update a local copy of the image for easier saving
        updateImageLocal(canvas);
      }

    // Get the touch position relative to the top-left of the canvas
    // When we get the raw values of pageX and pageY below, they take into account the scrolling on the page
    // but not the position relative to our target div. We'll adjust them using "target.offsetLeft" and
    // "target.offsetTop" to get the correct values in relation to the top left of the canvas.
    function getTouchPos(e) {
        if (!e)
            var e = event;

        if(e.touches) {
            if (e.touches.length == 1) { // Only deal with one finger
                var touch = e.touches[0]; // Get the information for finger #1
                touchX=touch.pageX-touch.target.offsetLeft;
                touchY=touch.pageY-touch.target.offsetTop;
            }
        }
    }


    // Set-up the canvas and add our event handlers after the page has loaded
    function init() {
        // Get the specific canvas element from the HTML document
        canvas = document.getElementById('scratchpad');

        history();


        // If the browser supports the canvas tag, get the 2d drawing context for this canvas
        if (canvas.getContext)
            ctx = canvas.getContext('2d');

        // Check that we have a valid context to draw on/with before adding event handlers
        if (ctx) {
            // React to mouse events on the canvas, and mouseup on the entire document
            canvas.addEventListener('mousedown', scratchpad_mouseDown, false);
            canvas.addEventListener('mousemove', scratchpad_mouseMove, false);
            window.addEventListener('mouseup', scratchpad_mouseUp, false);

            // React to touch events on the canvas
            canvas.addEventListener('touchstart', scratchpad_touchStart, false);
            canvas.addEventListener('touchmove', scratchpad_touchMove, false);
            canvas.addEventListener('touchend', scratchpad_touchEnd, false);
        }
    }

    // my user defined functions:
    function changeColor(c) {
        
        // turn last button border back to black
        document.getElementById(color + "button").style.border  = "2px solid #888";

        // set color
        color = c;

        // turn new button border to white
        document.getElementById(color + "button").style.border  = "2px solid #FFF";
    }

    // my user defined functions:
    function changeSize(s) {
        size = s;
    }

    /* When the user clicks on the button, 
    toggle between hiding and showing the dropdown content */
    function myFunction() {
        document.getElementById("myDropdown").classList.toggle("show");
    }

    // Close the dropdown if the user clicks outside of it
    window.onclick = function(e) {
      if (!e.target.matches('.dropbtn')) {
        var myDropdown = document.getElementById("myDropdown");
          if (myDropdown.classList.contains('show')) {
            myDropdown.classList.remove('show');
          }
      }
    }



</script>
{% endblock %}

<style>
/* Some CSS styling */
#scratchpadapp {
    /* Prevent nearby text being highlighted when accidentally dragging mouse outside confines of the canvas */
    -webkit-touch-callout: none;
    -webkit-user-select: none;
    -khtml-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
    user-select: none;
}
.bar {
    float:top;
    width:100%;
    height:40px;
    background-color:#def;
    padding:10px;
    border-radius:4px;
}
.bottom {
    float:bottom;
    margin-left:10px;
}
#scratchpad {
    float:left;
    height:500px;
    width:350px;
    border:2px solid #888;
    border-radius:4px;
    position:relative; /* Necessary for correct mouse co-ords in Firefox */
}
#clear_button, #save_button, .dropbtn, #undo_button, #redo_button {
    height:30px;
    width:30px;
    float:left;
    margin:3px;
    font-size: 12px;
    -webkit-appearance: none;
    background: #eee;
    border: 1px solid #888;
}
#save_remote {
    float:left;
    margin-left:5px;
}
.save_box {
    border:1px solid #bbb;
    border-radius:4px;
    padding:5px;
    clear:both;
}
#image_display {
    width:80px;
    height:60px;
    border:1px solid #000;
    margin:15px;
}
#redbutton {
    height:20px;
    width:20px;
    -webkit-appearance: none;
    background: red;
    border: 2px solid #888;
}
#blackbutton {
    height:20px;
    width:20px;
    -webkit-appearance: none;
    background: black;
    border: 2px solid #FFF;
}
#orangebutton {
    height:20px;
    width:20px;
    -webkit-appearance: none;
    background: orange;
    border: 2px solid #888;
}
#yellowbutton {
    height:20px;
    width:20px;
    -webkit-appearance: none;
    background: yellow;
    border: 2px solid #888;
}
#greenbutton {
    height:20px;
    width:20px;
    -webkit-appearance: none;
    background: green;
    border: 2px solid #888;
}
#bluebutton {
    height:20px;
    width:20px;
    -webkit-appearance: none;
    background: blue;
    border: 2px solid #888;
}
#indigobutton {
    height:20px;
    width:20px;
    -webkit-appearance: none;
    background: indigo;
    border: 2px solid #888;
}
#violetbutton {
    height:20px;
    width:20px;
    -webkit-appearance: none;
    background: violet;
    border: 2px solid #888;
}
#graybutton {
    height:20px;
    width:20px;
    -webkit-appearance: none;
    background: gray;
    border: 2px solid #888;
}
#whitebutton {
    height:20px;
    width:20px;
    -webkit-appearance: none;
    background: white;
    border: 2px solid #888;
}


input[type="submit"] {
    font-family: FontAwesome;
}
</style>
{% endblock %}

</head>

{% block content %}
<!-- TO DOS: Color options, color wheel, undo button! --> 
<body onload="init()">
    <div id="scratchpadapp">

            <input type="submit" value="&#xf0e2;" id="undo_button" onclick="undo(ctx);">
            <input type="submit" value="&#xf01e;" id="redo_button" onclick="redo(ctx);">
            <input type="submit" value="&#xf1b8;" id="clear_button" onclick="clearCanvas(canvas,ctx);">
            
            <input type="submit" value="&#xf1c5;" id="save_button" onclick="viewImageLocal(canvas); return false;">
            
            <form name="save_local" id="save_local" method="POST" onsubmit="saveImageLocal(canvas); return false;">
                <input type="submit" value="&#xf0c7;" id="save_button">
                 
            </form>
             <!-- R G B -->
             {% for color in colors %}
             <input type="submit" value= "" id="{{ color }}button" onclick=changeColor("{{ color }}");>
             {% endfor %}
            
            <font color=red>{{ uploaded }}</font>
            
        </div>

         <div class="save_box">             
             <center>
             <!-- thumbnail -->
                <img id="image_display">
              </center>
         </div>


        <div class="bottom">
            <canvas id="scratchpad" height="500px" width="350px">
            </canvas>
        </div>
        
        
    </div>
</body>
{% endblock %}

</html>

.image:hover img {
    -webkit-transform:scale(1.15); /* Safari and Chrome */
    -moz-transform:scale(1.15); /* Firefox */
    -ms-transform:scale(1.15); /* IE 9 */
    -o-transform:scale(1.15); /* Opera */
     transform:scale(1.15);
}
